/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ansic = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,25],$Vf=[1,28],$Vg=[1,29],$Vh=[1,27],$Vi=[1,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,102,103,108],$Vj=[1,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,102,103,108,145],$Vk=[1,38],$Vl=[1,39],$Vm=[1,37],$Vn=[2,76],$Vo=[4,7,9,11,19,26,73],$Vp=[4,7,9,11,19,26,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,102,103,108],$Vq=[4,97,99],$Vr=[19,73],$Vs=[2,84],$Vt=[1,51],$Vu=[1,54],$Vv=[9,19,59,73,99],$Vw=[1,58],$Vx=[1,57],$Vy=[4,7,9,11,19],$Vz=[7,9,11,19,59,73,99],$VA=[1,69],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,79],$VG=[1,80],$VH=[1,82],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[1,90],$VO=[1,74],$VP=[1,115],$VQ=[1,118],$VR=[1,116],$VS=[1,117],$VT=[1,120],$VU=[1,121],$VV=[1,122],$VW=[1,123],$VX=[1,124],$VY=[1,125],$VZ=[1,126],$V_=[1,127],$V$=[1,128],$V01=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,99,101,102,103,108,127,128,133,135,136,137,138,139,140,141,142],$V11=[86,87,88,89,90,91,92,93,94,97,101,102,103,108],$V21=[4,7,9,11,26],$V31=[1,152],$V41=[19,101],$V51=[19,73,101],$V61=[9,12,19,57,73,101],$V71=[9,12,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,101],$V81=[2,27],$V91=[9,12,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,73,101],$Va1=[1,179],$Vb1=[9,12,19,54,56,57,73,101],$Vc1=[1,184],$Vd1=[7,9,11,12,14,15,16,17,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,73,101],$Ve1=[4,5,6,7,16,17,23,25,26,27,28,29,30],$Vf1=[9,12,19,52,54,56,57,73,101],$Vg1=[1,185],$Vh1=[2,1],$Vi1=[9,12,19,50,52,54,56,57,73,101],$Vj1=[1,189],$Vk1=[9,12,19,48,50,52,54,56,57,73,101],$Vl1=[1,190],$Vm1=[9,12,19,25,48,50,52,54,56,57,73,101],$Vn1=[1,191],$Vo1=[1,192],$Vp1=[9,12,19,25,44,45,48,50,52,54,56,57,73,101],$Vq1=[1,193],$Vr1=[1,194],$Vs1=[1,195],$Vt1=[1,196],$Vu1=[9,12,19,25,39,40,41,42,44,45,48,50,52,54,56,57,73,101],$Vv1=[1,197],$Vw1=[1,198],$Vx1=[9,12,19,25,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,101],$Vy1=[1,199],$Vz1=[1,200],$VA1=[9,12,19,25,27,28,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,101],$VB1=[1,201],$VC1=[1,202],$VD1=[1,203],$VE1=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,99,101,127,128,133,135,136,137,138,139,140,141,142],$VF1=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,99,101,127,128,133,134,135,136,137,138,139,140,141,142],$VG1=[4,5,6,7,9,16,17,23,25,26,27,28,29,30,73,99,101,127,128,133,134,135,136,137,138,139,140,141,142],$VH1=[1,211],$VI1=[9,12,19,57,73],$VJ1=[9,19],$VK1=[1,229],$VL1=[1,230],$VM1=[1,257],$VN1=[2,146],$VO1=[1,288],$VP1=[1,287],$VQ1=[1,290],$VR1=[7,9,11,19];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENTIFIER":4,"CONSTANT":5,"STRING_LITERAL":6,"(":7,"expression":8,")":9,"postfix_expression":10,"[":11,"]":12,"argument_expression_list":13,".":14,"PTR_OP":15,"INC_OP":16,"DEC_OP":17,"assignment_expression":18,",":19,"unary_expression":20,"unary_operator":21,"cast_expression":22,"SIZEOF":23,"type_name":24,"&":25,"*":26,"+":27,"-":28,"~":29,"!":30,"multiplicative_expression":31,"/":32,"%":33,"additive_expression":34,"shift_expression":35,"LEFT_OP":36,"RIGHT_OP":37,"relational_expression":38,"<":39,">":40,"LE_OP":41,"GE_OP":42,"equality_expression":43,"EQ_OP":44,"NE_OP":45,"and_expression":46,"exclusive_or_expression":47,"^":48,"inclusive_or_expression":49,"|":50,"logical_and_expression":51,"AND_OP":52,"logical_or_expression":53,"OR_OP":54,"conditional_expression":55,"?":56,":":57,"assignment_operator":58,"=":59,"MUL_ASSIGN":60,"DIV_ASSIGN":61,"MOD_ASSIGN":62,"ADD_ASSIGN":63,"SUB_ASSIGN":64,"LEFT_ASSIGN":65,"RIGHT_ASSIGN":66,"AND_ASSIGN":67,"XOR_ASSIGN":68,"OR_ASSIGN":69,"constant_expression":70,"declaration":71,"partial_declaration":72,";":73,"declaration_specifiers":74,"init_declarator_list":75,"storage_class_specifier":76,"type_specifier":77,"init_declarator":78,"declarator":79,"initializer":80,"TYPEDEF":81,"EXTERN":82,"STATIC":83,"AUTO":84,"REGISTER":85,"VOID":86,"CHAR":87,"SHORT":88,"INT":89,"LONG":90,"FLOAT":91,"DOUBLE":92,"SIGNED":93,"UNSIGNED":94,"struct_or_union_specifier":95,"enum_specifier":96,"TYPE_NAME":97,"struct_or_union":98,"{":99,"struct_declaration_list":100,"}":101,"STRUCT":102,"UNION":103,"struct_declaration":104,"specifier_qualifier_list":105,"struct_declarator_list":106,"struct_declarator":107,"ENUM":108,"enumerator_list":109,"enumerator":110,"pointer":111,"direct_declarator":112,"parameter_type_list":113,"parameter_list":114,"ELLIPSIS":115,"parameter_declaration":116,"abstract_declarator":117,"direct_abstract_declarator":118,"initializer_list":119,"statement":120,"labeled_statement":121,"compound_statement":122,"expression_statement":123,"selection_statement":124,"iteration_statement":125,"jump_statement":126,"CASE":127,"DEFAULT":128,"partial_compound_statement":129,"partial2_compound_statement":130,"statement_list":131,"declaration_list":132,"IF":133,"ELSE":134,"SWITCH":135,"WHILE":136,"DO":137,"FOR":138,"GOTO":139,"CONTINUE":140,"BREAK":141,"RETURN":142,"translation_unit":143,"external_declaration":144,"EOF":145,"function_definition":146,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",5:"CONSTANT",6:"STRING_LITERAL",7:"(",9:")",11:"[",12:"]",14:".",15:"PTR_OP",16:"INC_OP",17:"DEC_OP",19:",",23:"SIZEOF",25:"&",26:"*",27:"+",28:"-",29:"~",30:"!",32:"/",33:"%",36:"LEFT_OP",37:"RIGHT_OP",39:"<",40:">",41:"LE_OP",42:"GE_OP",44:"EQ_OP",45:"NE_OP",48:"^",50:"|",52:"AND_OP",54:"OR_OP",56:"?",57:":",59:"=",60:"MUL_ASSIGN",61:"DIV_ASSIGN",62:"MOD_ASSIGN",63:"ADD_ASSIGN",64:"SUB_ASSIGN",65:"LEFT_ASSIGN",66:"RIGHT_ASSIGN",67:"AND_ASSIGN",68:"XOR_ASSIGN",69:"OR_ASSIGN",73:";",81:"TYPEDEF",82:"EXTERN",83:"STATIC",84:"AUTO",85:"REGISTER",86:"VOID",87:"CHAR",88:"SHORT",89:"INT",90:"LONG",91:"FLOAT",92:"DOUBLE",93:"SIGNED",94:"UNSIGNED",97:"TYPE_NAME",99:"{",101:"}",102:"STRUCT",103:"UNION",108:"ENUM",115:"ELLIPSIS",127:"CASE",128:"DEFAULT",133:"IF",134:"ELSE",135:"SWITCH",136:"WHILE",137:"DO",138:"FOR",139:"GOTO",140:"CONTINUE",141:"BREAK",142:"RETURN",145:"EOF"},
productions_: [0,[3,1],[3,1],[3,1],[3,3],[10,1],[10,4],[10,3],[10,4],[10,3],[10,3],[10,2],[10,2],[13,1],[13,3],[20,1],[20,2],[20,2],[20,2],[20,2],[20,4],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[22,1],[22,4],[31,1],[31,3],[31,3],[31,3],[34,1],[34,3],[34,3],[35,1],[35,3],[35,3],[38,1],[38,3],[38,3],[38,3],[38,3],[43,1],[43,3],[43,3],[46,1],[46,3],[47,1],[47,3],[49,1],[49,3],[51,1],[51,3],[53,1],[53,3],[55,1],[55,5],[18,1],[18,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[8,1],[8,3],[70,1],[71,2],[72,1],[72,2],[74,1],[74,2],[74,1],[74,2],[75,1],[75,3],[78,1],[78,3],[76,1],[76,1],[76,1],[76,1],[76,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[95,5],[95,5],[95,4],[95,2],[95,2],[98,1],[98,1],[100,1],[100,2],[104,3],[105,2],[105,1],[106,1],[106,3],[107,1],[96,4],[96,5],[96,2],[96,5],[96,2],[109,1],[109,3],[110,1],[110,3],[79,2],[79,1],[112,1],[112,3],[112,4],[112,3],[112,4],[112,3],[111,1],[111,2],[113,1],[113,3],[114,1],[114,3],[116,2],[116,2],[116,1],[24,1],[24,2],[117,1],[117,1],[117,2],[118,3],[118,2],[118,3],[118,3],[118,4],[118,2],[118,3],[118,3],[118,4],[80,1],[80,3],[80,4],[119,1],[119,3],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[121,3],[121,4],[121,3],[122,2],[129,1],[129,2],[129,2],[129,3],[130,1],[132,1],[132,2],[131,1],[131,2],[123,1],[123,2],[124,5],[124,7],[124,5],[125,5],[125,7],[125,6],[125,7],[126,3],[126,2],[126,2],[126,2],[126,3],[143,1],[143,2],[143,2],[143,3],[144,1],[144,1],[146,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4: case 75: case 130: case 149: case 172:
this.$ = $$[$0-1];
break;
case 5: case 15: case 27: case 29: case 33: case 36: case 39: case 44: case 47: case 49: case 51: case 53: case 55: case 57: case 59: case 72: case 74: case 84: case 117: case 128: case 137: case 147: case 158: case 200: case 201:
this.$ = $$[$0];
break;
case 6: case 8:
this.$ = binaryexpr($$[$0-3],$$[$0-2],$$[$0-1],this._$);
break;
case 7:
this.$ = binaryexpr($$[$0-2],$$[$0-1],[],this._$);
break;
case 9: case 10: case 30: case 31: case 32: case 34: case 35: case 37: case 38: case 40: case 41: case 42: case 43: case 45: case 46: case 48: case 50: case 52: case 54: case 56: case 60:
this.$ = binaryexpr($$[$0-2],$$[$0-1],$$[$0],this._$);
break;
case 11: case 12:
this.$ = unaryexpr($$[$0-1],String($$[$0])+'post',this._$);
break;
case 13:
this.$ =[$$[$0]];
break;
case 14: case 138: case 140:
 this.$=[...$$[$0-2]];this.$.push($$[$0]); 
break;
case 16:
this.$ = unaryexpr($$[$0],$$[$0-1],this._$)						;
break;
case 17: case 18: case 19:
this.$ = unaryexpr($$[$0],$$[$0-1],this._$);
break;
case 20:
this.$ = unaryexpr($$[$0-1],$$[$0-3],this._$);
break;
case 28:
this.$ = binaryexpr($$[$0-2],'typecast',$$[$0],this._$);
break;
case 58:
this.$ = ternaryexpr($$[$0-4],$$[$0-2],$$[$0],this._$);
break;
case 73:
this.$ = binaryexpr($$[$0-2],$$[$0-1],$$[$0],this._$) ;
break;
case 76:
this.$ = [basetypefor(abstracttype(),$$[$0],this._$)]    // -> introduces nametags for struct, union or enum;
break;
case 77:
  this.$ = []; for (const declarator of $$[$0]) { this.$.push(basetypefor(declarator,$$[$0-1],this._$)); }; refreshTypenames($$[$0-1],this.$); 
break;
case 78:
this.$ = [$$[$0]] ;
break;
case 79: case 81: case 113:
 this.$=[...$$[$0]]; this.$.push($$[$0-1]); 
break;
case 80: case 82: case 110: case 114: case 115: case 123: case 139: case 161: case 178: case 180:
this.$ = [$$[$0]];
break;
case 83: case 116:
 this.$ = [...$$[$0-2]]; this.$.push($$[$0]); 
break;
case 85:
 this.$ = $$[$0-2]; this.$.initializer=$$[$0]; 
break;
case 100:
 this.$=$$[$0]; 
break;
case 103: case 104:
this.$ = structof($$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 105:
this.$ = structof($$[$0-3],null,$$[$0-1]);
break;
case 106: case 107:
this.$ = structof($$[$0-1],$$[$0],null);
break;
case 111: case 179:
 this.$=[...$$[$0-1]];this.$.push($$[$0]); 
break;
case 112:
this.$ = basetypefor($$[$0-1],$$[$0-2],this._$);
break;
case 118:
this.$ = enumfrom(null,$$[$0-1],this._$);
break;
case 119: case 121:
this.$ = enumfrom($$[$0-3],$$[$0-1],this._$);
break;
case 120: case 122:
this.$ = enumfrom($$[$0],null,this._$);
break;
case 124:
this.$=[...$$[$0-2]];this.$.push($$[$0]); 
break;
case 125:
this.$ = { key: $$[$0], value: null };
break;
case 126:
this.$ = { key: $$[$0-2], value: $$[$0] };
break;
case 127: case 148:
this.$ = pointerto($$[$0-1],$$[$0]);
break;
case 129:
this.$ = identifier(yytext);
break;
case 131: case 153:
this.$ = arrayof($$[$0-3]);
break;
case 132: case 152:
this.$ = arrayof($$[$0-2]);
break;
case 133: case 157:
this.$ = functionof($$[$0-3], $$[$0-1] );
break;
case 134: case 156:
this.$ = functionof($$[$0-2], { } );
break;
case 135:
this.$ = 1;
break;
case 136:
this.$ = 1 + $$[$0];
break;
case 141: case 142: case 145:
this.$ = basetypefor($$[$0],$$[$0-1],this._$);
break;
case 143: case 144:
this.$ = basetypefor(abstracttype(),$$[$0],this._$);
break;
case 146:
this.$ = pointerto($$[$0],abstracttype());
break;
case 150: case 151:
this.$ = arrayof(abstracttype());
break;
case 154:
this.$ = functionof(abstracttype(), { } );
break;
case 155:
this.$ = functionof(abstracttype(), $$[$0-1] );
break;
case 159:
this.$ = { kind: "arrayinitializer", values:$$[$0-1] };
break;
case 160:
this.$ = { kind: "arrayinitializer", values:$$[$0-2] };
break;
case 162:
 this.$=[...$$[$0-2]]; this.$.push($$[$0]); 
break;
case 163: case 165: case 168:
this.$ = attachLoc($$[$0],this._$) ;
break;
case 164:
this.$ = attachLoc($$[$0],this._$) // done apart from decls;
break;
case 166: case 167:
this.$ = attachLoc($$[$0],this._$);
break;
case 169:
 this.$=$$[$0]; this.$.label=$$[$0-2]; 
break;
case 170:
 this.$=$$[$0]; this.$.caselabel=$$[$0-2]; 
break;
case 171:
 this.$=$$[$0]; this.$.caselabel='default'; 
break;
case 173:
 deleteScope(); this.$={  declarations:[], code: [] }; 
break;
case 174:
 deleteScope(); this.$={  declarations:[], code: [...$$[$0]]}; 
break;
case 175:
 deleteScope(); this.$={  declarations:$$[$0], code: [] }; 
break;
case 176:
 deleteScope(); this.$={  declarations:$$[$0-1], code:[...$$[$0]] };  
break;
case 177:
 newScope() 
break;
case 181:
 this.$=[...$$[$0-1]]; this.$.push($$[$0]); 
break;
case 183:
this.$ = { kind: 'stmt', type: 'expr', expr: $$[$0-1]};
break;
case 184:
this.$ = { kind:'stmt', type:'if', cond: $$[$0-2], stmt: $$[$0], } ;
break;
case 185:
this.$ = { kind:'stmt', type:'if', cond: $$[$0-4], stmt: $$[$0-2], else: $$[$0] };
break;
case 186:
this.$ = { kind:'stmt', type:'switch', cond: $$[$0-2], stmt: $$[$0], };
break;
case 187:
this.$ = {kind: 'stmt', type: 'while' , cond: $$[$0-2], stmt: $$[$0] };
break;
case 188:
this.$ = {kind: 'stmt', type: 'do'    , cond: $$[$0-2], stmt: $$[$0-5] };
break;
case 189:
this.$ = {kind: 'stmt', type: 'for'   , e1: $$[$0-3], e2: $$[$0-2], stmt: $$[$0] };
break;
case 190:
this.$ = {kind: 'stmt', type: 'for'   , e1: $$[$0-4], e2: $$[$0-3], e3: $$[$0-2], stmt: $$[$0] };
break;
case 191:
this.$ = { kind: 'stmt', type: 'goto', where: $$[$0-1] };
break;
case 192:
this.$ = { kind: 'stmt', type: 'continue' };
break;
case 193:
this.$ = { kind: 'stmt', type: 'break' };
break;
case 194:
this.$ = { kind: 'stmt', type: 'return' };
break;
case 195:
this.$ = { kind: 'stmt', type: 'return', expr: $$[$0-1] };
break;
case 196:
 this.$=[...$$[$0]]; 
break;
case 197:
 this.$=[...$$[$0-1]]; return this.$; 
break;
case 198:
 this.$=[...$$[$0-1]].concat($$[$0]); 
break;
case 199:
 this.$=[...$$[$0-2]].concat($$[$0-1]); return this.$; 
break;
case 202:
 this.$=basetypefor($$[$0-1],$$[$0-2],this._$);this.$.code=$$[$0];this.$=[this.$]; 
break;
}
},
table: [{71:4,72:6,74:5,76:7,77:8,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,108:$Vh,143:1,144:2,146:3},{1:[3],71:4,72:6,74:5,76:7,77:8,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,108:$Vh,144:30,146:3},o($Vi,[2,196],{145:[1,31]}),o($Vj,[2,200]),o($Vj,[2,201]),{4:$Vk,7:$Vl,26:$Vm,73:$Vn,75:33,78:36,79:32,111:34,112:35},{73:[1,40]},o($Vo,[2,78],{76:7,77:8,95:23,96:24,98:26,74:41,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,97:$Ve,102:$Vf,103:$Vg,108:$Vh}),o($Vo,[2,80],{76:7,77:8,95:23,96:24,98:26,74:42,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,97:$Ve,102:$Vf,103:$Vg,108:$Vh}),o($Vp,[2,86]),o($Vp,[2,87]),o($Vp,[2,88]),o($Vp,[2,89]),o($Vp,[2,90]),o($Vp,[2,91]),o($Vp,[2,92]),o($Vp,[2,93]),o($Vp,[2,94]),o($Vp,[2,95]),o($Vp,[2,96]),o($Vp,[2,97]),o($Vp,[2,98]),o($Vp,[2,99]),o($Vp,[2,100]),o($Vp,[2,101]),o($Vp,[2,102]),{4:[1,43],97:[1,44],99:[1,45]},{4:[1,47],97:[1,48],99:[1,46]},o($Vq,[2,108]),o($Vq,[2,109]),o($Vi,[2,198],{145:[1,49]}),o($Vi,[2,197]),o($Vr,$Vs,{122:50,129:52,130:53,59:$Vt,99:$Vu}),{19:[1,55],73:[2,77]},{4:$Vk,7:$Vl,112:56},o($Vv,[2,128],{7:$Vw,11:$Vx}),o($Vr,[2,82]),o($Vy,[2,135],{111:59,26:$Vm}),o($Vz,[2,129]),{4:$Vk,7:$Vl,26:$Vm,79:60,111:34,112:35},o([1,4,5,6,7,16,17,23,25,26,27,28,29,30,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,99,101,102,103,108,127,128,133,135,136,137,138,139,140,141,142,145],[2,75]),o($Vo,[2,79]),o($Vo,[2,81]),o($Vp,[2,106],{99:[1,61]}),o($Vp,[2,107],{99:[1,62]}),{77:66,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,100:63,102:$Vf,103:$Vg,104:64,105:65,108:$Vh},{4:$VA,109:67,110:68},o($Vp,[2,120],{99:[1,70]}),o($Vp,[2,122],{99:[1,71]}),o($Vi,[2,199]),o($Vj,[2,202]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,18:73,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,80:72,99:$VO},{101:[1,104]},{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,71:108,72:6,73:$VQ,74:129,76:7,77:8,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,99:$Vu,101:[2,173],102:$Vf,103:$Vg,108:$Vh,120:107,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,131:105,132:106,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},o($V01,[2,177]),{4:$Vk,7:$Vl,26:$Vm,78:131,79:132,111:34,112:35},o($Vv,[2,127],{7:$Vw,11:$Vx}),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,12:[1,134],16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:135,70:133},{9:[1,138],74:141,76:7,77:8,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,108:$Vh,113:137,114:139,116:140},o($Vy,[2,136]),{9:[1,142]},{77:66,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,100:143,102:$Vf,103:$Vg,104:64,105:65,108:$Vh},{77:66,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,100:144,102:$Vf,103:$Vg,104:64,105:65,108:$Vh},{77:66,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,101:[1,145],102:$Vf,103:$Vg,104:146,105:65,108:$Vh},o($V11,[2,110]),{4:$Vk,7:$Vl,26:$Vm,79:149,106:147,107:148,111:34,112:35},o($V21,[2,114],{95:23,96:24,98:26,77:66,105:150,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,97:$Ve,102:$Vf,103:$Vg,108:$Vh}),{19:$V31,101:[1,151]},o($V41,[2,123]),o($V41,[2,125],{59:[1,153]}),{4:$VA,109:154,110:68},{4:$VA,109:155,110:68},o($Vr,[2,85]),o($V51,[2,158]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,18:73,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,80:157,99:$VO,119:156},o($V61,[2,59]),o($V71,$V81,{58:158,59:[1,159],60:[1,160],61:[1,161],62:[1,162],63:[1,163],64:[1,164],65:[1,165],66:[1,166],67:[1,167],68:[1,168],69:[1,169]}),o($V61,[2,57],{54:[1,171],56:[1,170]}),o($V91,[2,15],{7:[1,173],11:[1,172],14:[1,174],15:[1,175],16:[1,176],17:[1,177]}),{3:84,4:$VB,5:$VC,6:$VD,7:$Va1,10:78,16:$VF,17:$VG,20:178,21:81,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN},{3:84,4:$VB,5:$VC,6:$VD,7:$Va1,10:78,16:$VF,17:$VG,20:180,21:81,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:181,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN},{3:84,4:$VB,5:$VC,6:$VD,7:[1,183],10:78,16:$VF,17:$VG,20:182,21:81,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN},o($Vb1,[2,55],{52:$Vc1}),o($Vd1,[2,5]),o($Ve1,[2,21]),o($Ve1,[2,22]),o($Ve1,[2,23]),o($Ve1,[2,24]),o($Ve1,[2,25]),o($Ve1,[2,26]),o($Vf1,[2,53],{50:$Vg1}),o($Vd1,$Vh1),o($Vd1,[2,2]),o($Vd1,[2,3]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:186,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,24:187,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,77:66,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,105:188,108:$Vh},o($Vi1,[2,51],{48:$Vj1}),o($Vk1,[2,49],{25:$Vl1}),o($Vm1,[2,47],{44:$Vn1,45:$Vo1}),o($Vp1,[2,44],{39:$Vq1,40:$Vr1,41:$Vs1,42:$Vt1}),o($Vu1,[2,39],{36:$Vv1,37:$Vw1}),o($Vx1,[2,36],{27:$Vy1,28:$Vz1}),o($VA1,[2,33],{26:$VB1,32:$VC1,33:$VD1}),o($V71,[2,29]),o([1,4,5,6,7,16,17,23,25,26,27,28,29,30,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,99,101,102,103,108,127,128,133,134,135,136,137,138,139,140,141,142,145],[2,172]),{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,101:[2,174],120:204,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,71:206,72:6,73:$VQ,74:129,76:7,77:8,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,99:$Vu,101:[2,175],102:$Vf,103:$Vg,108:$Vh,120:107,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,131:205,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},o($VE1,[2,180]),o($V01,[2,178]),o($VF1,[2,163]),o($VF1,[2,164]),o($VF1,[2,165]),o($VF1,[2,166]),o($VF1,[2,167]),o($VF1,[2,168]),o([7,11,14,15,16,17,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,59,60,61,62,63,64,65,66,67,68,69,73],$Vh1,{57:[1,207]}),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:135,70:208},{57:[1,209]},o($VG1,[2,182]),{19:$VH1,73:[1,210]},{7:[1,212]},{7:[1,213]},{7:[1,214]},{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:215,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},{7:[1,216]},{4:[1,217]},{73:[1,218]},{73:[1,219]},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:221,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:[1,220]},{4:$Vk,7:$Vl,26:$Vm,73:$Vn,75:33,78:36,79:132,111:34,112:35},o($VI1,[2,72]),o($Vr,[2,83]),o($Vr,$Vs,{59:$Vt}),{12:[1,222]},o($Vz,[2,132]),o([12,19,57,101],[2,74]),o($V91,$V81),{9:[1,223]},o($Vz,[2,134]),{9:[2,137],19:[1,224]},o($VJ1,[2,139]),o($VJ1,[2,143],{112:35,79:225,117:226,111:227,118:228,4:$Vk,7:$VK1,11:$VL1,26:$Vm}),o($Vz,[2,130]),{77:66,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,101:[1,231],102:$Vf,103:$Vg,104:146,105:65,108:$Vh},{77:66,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,101:[1,232],102:$Vf,103:$Vg,104:146,105:65,108:$Vh},o($Vp,[2,105]),o($V11,[2,111]),{19:[1,234],73:[1,233]},o($Vr,[2,115]),o($Vr,[2,117]),o($V21,[2,113]),o($Vp,[2,118]),{4:$VA,110:235},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:135,70:236},{19:$V31,101:[1,237]},{19:$V31,101:[1,238]},{19:[1,240],101:[1,239]},o($V41,[2,161]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,18:241,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},o($Ve1,[2,61]),o($Ve1,[2,62]),o($Ve1,[2,63]),o($Ve1,[2,64]),o($Ve1,[2,65]),o($Ve1,[2,66]),o($Ve1,[2,67]),o($Ve1,[2,68]),o($Ve1,[2,69]),o($Ve1,[2,70]),o($Ve1,[2,71]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:242,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:243},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:244,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,9:[1,245],10:78,13:246,16:$VF,17:$VG,18:247,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},{4:[1,248]},{4:[1,249]},o($Vd1,[2,11]),o($Vd1,[2,12]),o($V91,[2,16]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:186,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},o($V91,[2,17]),o($V91,[2,18]),o($V91,[2,19]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:186,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,24:250,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,77:66,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,105:188,108:$Vh},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:251},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:252},{9:[1,253],19:$VH1},{9:[1,254]},{7:$VM1,9:[2,144],11:$VL1,26:$Vm,111:256,117:255,118:228},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:258},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:259},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:260},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:261},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:262},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:263},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:264},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:265},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:266},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:267},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:268},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:269},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:270,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:271,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:272,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN},o($VE1,[2,181]),{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,101:[2,176],120:204,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},o($V01,[2,179]),{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:273,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},{57:[1,274]},{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:275,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},o($VG1,[2,183]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,18:276,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:277,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:278,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:279,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},{136:[1,280]},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,123:281},{73:[1,282]},o($VF1,[2,192]),o($VF1,[2,193]),o($VF1,[2,194]),{19:$VH1,73:[1,283]},o($Vz,[2,131]),o($Vz,[2,133]),{74:141,76:7,77:8,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,108:$Vh,115:[1,284],116:285},o($VJ1,[2,141]),o($VJ1,[2,142]),o($VJ1,$VN1,{112:56,118:286,4:$Vk,7:$VK1,11:$VL1}),o($VJ1,[2,147],{7:$VO1,11:$VP1}),{4:$Vk,7:$VK1,9:$VQ1,11:$VL1,26:$Vm,74:141,76:7,77:8,79:60,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,108:$Vh,111:227,112:35,113:291,114:139,116:140,117:289,118:228},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,12:[1,292],16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:135,70:293},o($Vp,[2,103]),o($Vp,[2,104]),o($V11,[2,112]),{4:$Vk,7:$Vl,26:$Vm,79:149,107:294,111:34,112:35},o($V41,[2,124]),o($V41,[2,126]),o($Vp,[2,119]),o($Vp,[2,121]),o($V51,[2,159]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,18:73,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,80:296,99:$VO,101:[1,295]},o($V61,[2,60]),{19:$VH1,57:[1,297]},o($Vb1,[2,56],{52:$Vc1}),{12:[1,298],19:$VH1},o($Vd1,[2,7]),{9:[1,299],19:[1,300]},o($VJ1,[2,13]),o($Vd1,[2,9]),o($Vd1,[2,10]),{9:[1,301]},o($Vf1,[2,54],{50:$Vg1}),o($Vi1,[2,52],{48:$Vj1}),o($Vd1,[2,4]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:302,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN},{9:[2,145]},{7:$VM1,9:$VN1,11:$VL1,118:286},{7:$VM1,9:$VQ1,11:$VL1,26:$Vm,74:141,76:7,77:8,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,108:$Vh,111:256,113:291,114:139,116:140,117:289,118:228},o($Vk1,[2,50],{25:$Vl1}),o($Vm1,[2,48],{44:$Vn1,45:$Vo1}),o($Vp1,[2,45],{39:$Vq1,40:$Vr1,41:$Vs1,42:$Vt1}),o($Vp1,[2,46],{39:$Vq1,40:$Vr1,41:$Vs1,42:$Vt1}),o($Vu1,[2,40],{36:$Vv1,37:$Vw1}),o($Vu1,[2,41],{36:$Vv1,37:$Vw1}),o($Vu1,[2,42],{36:$Vv1,37:$Vw1}),o($Vu1,[2,43],{36:$Vv1,37:$Vw1}),o($Vx1,[2,37],{27:$Vy1,28:$Vz1}),o($Vx1,[2,38],{27:$Vy1,28:$Vz1}),o($VA1,[2,34],{26:$VB1,32:$VC1,33:$VD1}),o($VA1,[2,35],{26:$VB1,32:$VC1,33:$VD1}),o($V71,[2,30]),o($V71,[2,31]),o($V71,[2,32]),o($VF1,[2,169]),{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:303,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},o($VF1,[2,171]),o($VI1,[2,73]),{9:[1,304],19:$VH1},{9:[1,305],19:$VH1},{9:[1,306],19:$VH1},{7:[1,307]},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,123:308},o($VF1,[2,191]),o($VF1,[2,195]),{9:[2,138]},o($VJ1,[2,140]),o($VJ1,[2,148],{7:$VO1,11:$VP1}),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,12:[1,309],16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:135,70:310},{9:[1,311],74:141,76:7,77:8,81:$V0,82:$V1,83:$V2,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:$Ve,98:26,102:$Vf,103:$Vg,108:$Vh,113:312,114:139,116:140},{9:[1,313]},o($VR1,[2,154]),{9:[1,314]},o($VR1,[2,150]),{12:[1,315]},o($Vr,[2,116]),o($V51,[2,160]),o($V41,[2,162]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,20:136,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:316},o($Vd1,[2,6]),o($Vd1,[2,8]),{3:84,4:$VB,5:$VC,6:$VD,7:$VE,10:78,16:$VF,17:$VG,18:317,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},o($V91,[2,20]),o($V91,[2,28]),o($VF1,[2,170]),{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:318,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:319,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:320,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:321,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},{3:84,4:$VB,5:$VC,6:$VD,7:$VE,8:323,9:[1,322],10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75},o($VR1,[2,152]),{12:[1,324]},o($VR1,[2,156]),{9:[1,325]},o($VR1,[2,149]),o($VR1,[2,155]),o($VR1,[2,151]),o($V61,[2,58]),o($VJ1,[2,14]),o($VE1,[2,184],{134:[1,326]}),o($VF1,[2,186]),o($VF1,[2,187]),{9:[1,327],19:$VH1},{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:328,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},{9:[1,329],19:$VH1},o($VR1,[2,153]),o($VR1,[2,157]),{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:330,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},{73:[1,331]},o($VF1,[2,189]),{3:84,4:$VP,5:$VC,6:$VD,7:$VE,8:119,10:78,16:$VF,17:$VG,18:130,20:76,21:81,22:103,23:$VH,25:$VI,26:$VJ,27:$VK,28:$VL,29:$VM,30:$VN,31:102,34:101,35:100,38:99,43:98,46:97,47:96,49:91,51:83,53:77,55:75,73:$VQ,99:$Vu,120:332,121:109,122:110,123:111,124:112,125:113,126:114,127:$VR,128:$VS,129:52,130:53,133:$VT,135:$VU,136:$VV,137:$VW,138:$VX,139:$VY,140:$VZ,141:$V_,142:$V$},o($VF1,[2,185]),o($VF1,[2,188]),o($VF1,[2,190])],
defaultActions: {255:[2,145],284:[2,138]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    //_token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	parser.yy.typenames=[] // access current typenames
	parser.yy.scopes=[parser.yy.typenames]    // manage scoped typenames in a stack, pushing copies of old scopes when entering, and popping on leaving
	function newScope(){
		parser.yy.typenames=[...parser.yy.typenames]
		parser.yy.scopes.push(parser.yy.typenames)
	}
	function deleteScope(){
		parser.yy.scopes.pop()
		parser.yy.typenames=parser.yy.scopes.slice(-1)
	}

	function printtree(t){
		 console.log(JSON.stringify(t,null,2))
	}
	function identifier(name){
		return { type:"identifier", name:name }
	}
	function pointerto(n,t){
		ret = t
		for (let i = 1; i <= n; i++) {
  			ret = { type: "pointer", base: ret}
		} 
		return ret
	}
	function arrayof(t){
		return { kind: "type", type: "array", base: t}
	}
	function functionof(t,parameters){
		return { kind: "type", type: "function", base: t, params: parameters }
	}
	function structof(kind, tagname, content){
		return  { kind: "type", type: kind, tagname: tagname, body: content }
	}
	function basetypefor(t,b,loc){
		if (b.includes("typedef")) {
			const temp=[...b]
			temp.splice(temp.indexOf("typedef"),1)
			return { kind: "type", type: "typedef", loc: loc,base: temp, declarator: t }
		}
		return { kind: "type", type: "declaration", loc: loc,base: b, declarator: t }
	}
	function abstracttype(){
		return { kind: "type", type:"typeplaceholder" }
	}
	function refreshTypenames(b,declarations){
		if (b.includes("typedef")) {
			for (declaration of declarations){
				t=declaration.declarator
				while(t.type!="identifier"){
					t=t.base
				}
				parser.yy.typenames.push(t.name)
			}
		}
	}
	function binaryexpr(l,op,r,loc){
		return { kind: "expr", loc: loc, left: l, operator:op, right: r}
	}
	function ternaryexpr(l,mid,r,loc){
		return { kind: "expr", loc: loc, cond: l, condtrue:mid, condfalse: r}
	}
	function unaryexpr(e,op,loc){
		return { kind: "expr", loc: loc, operator:op, child: e}
	}
	function environment(decls){
		decl = {}
		tn = {}
		tags = {}
		for (declaration of decls){
			if (declaration.declarator.type != "typeplaceholder"){
				name=findAndResetName(declaration)
				decl[name]=declaration
				if (declaration.type==="typedef")       tn[name]=declaration
				if (declaration.type==="declaration") decl[name]=declaration
			}
			for (base of declaration.base) {
				if (typeof base==='object') {
					if (base.type==="struct")
						tags[base.tagname]=base
					if (base.type==="union")
						tags[base.tagname]=base
					if (base.type==="enum")
						tags[base.tagname]=base
				}
			}
		}
		return { declarations:decl , typenames: tn, structtags: tags }
	}
	function findAndResetName(decl){
		t=decl.declarator
		told=t
		while(t.type!="identifier"){
			told=t
			t=t.base
			if (t.type==="typeplaceholder") return null;
		}
		name = t.name
		told.base=abstracttype()
		return name
	}
	function attachLoc(smthg,loc){
		smthg.loc=loc
		return smthg
	}
	function enumfrom(name,keyvals,loc){
		if (keyvals!=null)
		{
			keystore = { }
			for (keyval of keyvals) {
				keystore[keyval.key]=keyval.value
			}
			rep = { kind: "type", loc:loc, type: "enum", tagname:name, enumvalues:keystore }
		}
		rep = { kind: "type", loc:loc, type: "enum", tagname:name }
		return rep
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:return 81;
break;
case 2:return 82;
break;
case 3:return 83;
break;
case 4:return 84;
break;
case 5:return 85;
break;
case 6:return 87;
break;
case 7:return 88;
break;
case 8:return 89;
break;
case 9:return 90;
break;
case 10:return 93;
break;
case 11:return 94;
break;
case 12:return 91;
break;
case 13:return 92;
break;
case 14:return 'CONST';
break;
case 15:return 'VOLATILE';
break;
case 16:return 86;
break;
case 17:return 102;
break;
case 18:return 103;
break;
case 19:return 108;
break;
case 20:return 127;
break;
case 21:return 128;
break;
case 22:return 133;
break;
case 23:return 134;
break;
case 24:return 135;
break;
case 25:return 136;
break;
case 26:return 137;
break;
case 27:return 138;
break;
case 28:return 139;
break;
case 29:return 140;
break;
case 30:return 141;
break;
case 31:return 142;
break;
case 32:return 23;
break;
case 33:return 115;
break;
case 34: yy_.yytext = yy_.yytext.substr(2,yy_.yyleng-2); return 5; 
break;
case 35: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 5; 
break;
case 36: yy_.yytext = yy_.yytext.substr(2,yy_.yyleng-2); return 6; 
break;
case 37: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 6; 
break;
case 38:return 5;
break;
case 39:return 5;
break;
case 40:return 5;
break;
case 41:return 5;
break;
case 42:return 5;
break;
case 43:return 5;
break;
case 44:
                                if (parser.yy.typenames.includes(yy_.yytext))
                                    return 97;
                                return 4;
                             
break;
case 45:return 15;
break;
case 46:return 16;
break;
case 47:return 17;
break;
case 48:return 36;
break;
case 49:return 37;
break;
case 50:return 41;
break;
case 51:return 42;
break;
case 52:return 44;
break;
case 53:return 45;
break;
case 54:return 52;
break;
case 55:return 54;
break;
case 56:return 60;
break;
case 57:return 61;
break;
case 58:return 62;
break;
case 59:return 63;
break;
case 60:return 64;
break;
case 61:return 65;
break;
case 62:return 66;
break;
case 63:return 67;
break;
case 64:return 68;
break;
case 65:return 69;
break;
case 66:return 73;
break;
case 67:return 39;
break;
case 68:return 40;
break;
case 69:return 26;
break;
case 70:return 32;
break;
case 71:return 27;
break;
case 72:return 28;
break;
case 73:return 33;
break;
case 74:return 59;
break;
case 75:return 19;
break;
case 76:return 14;
break;
case 77:return 57;
break;
case 78:return 25;
break;
case 79:return 50;
break;
case 80:return 29;
break;
case 81:return 48;
break;
case 82:return 56;
break;
case 83:return 30;
break;
case 84:return 11;
break;
case 85:return 12;
break;
case 86:return 7;
break;
case 87:return 9;
break;
case 88:return 99;
break;
case 89:return 101;
break;
case 90:/* skip whitespace */
break;
case 91:return 145;
break;
case 92:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:typedef)/,/^(?:extern)/,/^(?:static)/,/^(?:auto)/,/^(?:register)/,/^(?:char)/,/^(?:short)/,/^(?:int)/,/^(?:long)/,/^(?:signed)/,/^(?:unsigned)/,/^(?:float)/,/^(?:double)/,/^(?:const)/,/^(?:volatile)/,/^(?:void)/,/^(?:struct)/,/^(?:union)/,/^(?:enum)/,/^(?:case)/,/^(?:default)/,/^(?:if)/,/^(?:else)/,/^(?:switch)/,/^(?:while)/,/^(?:do)/,/^(?:for)/,/^(?:goto)/,/^(?:continue)/,/^(?:break)/,/^(?:return)/,/^(?:sizeof)/,/^(?:\.\.\.)/,/^(?:L'(\\.|[^\\\'])+')/,/^(?:'(\\.|[^\\\'])+')/,/^(?:L"(\\.|[^\\\"])*")/,/^(?:"(\\.|[^\\\"])*")/,/^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)/,/^(?:0([0-9])+([uUlL]*)?)/,/^(?:([0-9])+([uUlL]*)?)/,/^(?:([0-9])+([Ee][+-]?([0-9])+)([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])+\.([0-9])*(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:->)/,/^(?:\+\+)/,/^(?:--)/,/^(?:<<)/,/^(?:>>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:<<=)/,/^(?:>>=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:;)/,/^(?:<)/,/^(?:>)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:%)/,/^(?:=)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:&)/,/^(?:\|)/,/^(?:~)/,/^(?:\^)/,/^(?:\?)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ansic;
exports.Parser = ansic.Parser;
exports.parse = function () { return ansic.parse.apply(ansic, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}